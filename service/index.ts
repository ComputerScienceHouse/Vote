//@ts-nocheck

import * as express from "express";
import * as path from "path";
import * as cors from "cors";
import * as dotenv from 'dotenv';

dotenv.config()

const passport = require('passport');

const https = require('https')
var url = require("url");

var JwtStrategy = require('passport-jwt').Strategy,
    ExtractJwt = require('passport-jwt').ExtractJwt;


const options = {
  hostname: 'sso.csh.rit.edu',
  path: '/auth/realms/csh/.well-known/openid-configuration'
}


https.get(options, res => {
  res.setEncoding('utf8');
  res.on('data', function (chunk) {
    const jwks_uri = JSON.parse(chunk).jwks_uri;
    https.get({hostname: url.parse(jwks_uri).hostname, path: url.parse(jwks_uri).pathname}, res => {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            let secretOrKey = JSON.parse(chunk).keys[0].x5c[0]
            secretOrKey = secretOrKey.match(/.{1,64}/g).join('\n');
            secretOrKey = `-----BEGIN CERTIFICATE-----\n${secretOrKey}\n-----END CERTIFICATE-----\n`;
            var opts = {
                jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
                secretOrKey: secretOrKey,
                issuer: 'https://sso.csh.rit.edu/auth/realms/csh'
            }
            passport.use(new JwtStrategy(opts, function(jwt_payload, done) {
                return done(null, jwt_payload);
                }));
            
        })
    })
  });
})

// Configure Passport authenticated session persistence.
passport.serializeUser((user, cb) => {
  cb(null, user);
});

passport.deserializeUser((obj, cb) => {
  cb(null, obj);
});

const app = express();

app.use(passport.initialize());


app.use(express.json());
app.use(express.static(path.join(__dirname, "/../build")));
app.use(cors());

let currentPolls = [{"id": 1, "name": "eat a whole cake conditional", "voteOptions": ["eat 1 cake","eat 2 cakes", "eat no cakes : ("]},
{"id": 2, "name": "fail chad", "voteOptions": ["fail", "conditional", "abstain"]}
];


// Returns list of all current polls
app.get("/api/getCurrentPolls", passport.authenticate('jwt'), (req,res) => {
    https.get({hostname: "sso.csh.rit.edu", 
        path: "/auth/realms/csh/protocol/openid-connect/userinfo", 
        headers: {"Authorization": req.headers.authorization}
    }, infoRes => {
        infoRes.setEncoding('utf8');
        infoRes.on('data', function (chunk) {
            const groups = JSON.parse(chunk).groups;
            if (!groups.includes("active")) {
                res.status(403).send();
            } else if (groups.includes("10weeks") || groups.includes("fall-coop")) {
                res.status(403).send();
            } else {
                res.json(currentPolls)
            }
        });
    })
});

app.post("/api/getPollDetails", passport.authenticate('jwt'), (req,res) => {
    const poll = currentPolls.find(x => x.id === parseInt(req.body.voteId));
    if (poll) {
        res.json(poll)
    } else {
        res.status(404).send();
    }
});

// Send in a client's vote, called from any voting screen
app.post("/api/sendVote", passport.authenticate('jwt'), (req,res) => {
    res.status(204).send();
});

// Initialize a poll/vote, called from eval's init screen 
app.post("/api/initializePoll", passport.authenticate('jwt'), (req,res) => {
    // TODO - the id should actually be generated by putting it in the db 
    // for now it's just the idx in the list since we're not doing db things yet
    const newPoll = {
        "id": currentPolls.length + 1,
        "name": req.body.title,
        "voteOptions": req.body.options
    }
    currentPolls.push(newPoll);
    res.json({"pollId": newPoll.id});
});

// get the count without ending the poll
app.get("/api/getCount", passport.authenticate('jwt'), (req,res) => {
    res.json({"countYes": 1, "countNo": 2, "countAbstain": 0, "totalCount": 3});
});

// end the poll and get the final results, called from evals view  
app.get("/api/endPoll", passport.authenticate('jwt'), (req,res) => {
    res.json({"countYes": 1, "countNo": 2, "countAbstain": 0, "totalCount": 3});
});
/**
 *  TODO - what other endpoints will we need? 
 * Will Evals need to get a list of all who voted (to poke people if they're slow)?
 */
app.get('*', (req,res) =>{
    res.sendFile(path.join(__dirname+"/../build/index.html"));
});

const port = process.env.PORT || 5000;
app.listen(port);

console.log("App is listening on port " + port);
